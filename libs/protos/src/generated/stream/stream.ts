// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v3.20.3
// source: stream.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleServerStreamingCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "stream";

export interface StreamRequest {
  id: string;
  data: string;
}

export interface StreamResponse {
  id: string;
  data: string;
}

export const STREAM_PACKAGE_NAME = "stream";

function createBaseStreamRequest(): StreamRequest {
  return { id: "", data: "" };
}

export const StreamRequest: MessageFns<StreamRequest> = {
  encode(message: StreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== "") {
      writer.uint32(18).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseStreamResponse(): StreamResponse {
  return { id: "", data: "" };
}

export const StreamResponse: MessageFns<StreamResponse> = {
  encode(message: StreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== "") {
      writer.uint32(18).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface StreamServiceClient {
  stream(request: StreamRequest): Observable<StreamResponse>;
}

export interface StreamServiceController {
  stream(request: StreamRequest): Observable<StreamResponse>;
}

export function StreamServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["stream"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("StreamService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("StreamService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const STREAM_SERVICE_NAME = "StreamService";

export type StreamServiceService = typeof StreamServiceService;
export const StreamServiceService = {
  stream: {
    path: "/stream.StreamService/Stream",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: StreamRequest) => Buffer.from(StreamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StreamRequest.decode(value),
    responseSerialize: (value: StreamResponse) => Buffer.from(StreamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StreamResponse.decode(value),
  },
} as const;

export interface StreamServiceServer extends UntypedServiceImplementation {
  stream: handleServerStreamingCall<StreamRequest, StreamResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
